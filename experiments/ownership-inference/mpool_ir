[FUN] __infer_globals_initializer_mpool_locks_enabled

	[META] SKIP

	[META] VARIABLE_DECLARED(#GB<src/mpool.c>$mpool_locks_enabled:_Bool); [line 30, column 1]

	[STORE] *&#GB<src/mpool.c>$mpool_locks_enabled:_Bool=0 [line 30, column 1]

	[META] APPLY_ABSTRACTION; [line 30, column 1]

	[META] SKIP

[FUN] mpool_enable_locks

	[META] SKIP

	[STORE] *&#GB<src/mpool.c>$mpool_locks_enabled:_Bool=1 [line 38, column 2]

	[META] APPLY_ABSTRACTION; [line 38, column 2]

	[META] SKIP

[FUN] mpool_init

	[META] SKIP

	[LOAD] n$5=*&p:mpool* [line 70, column 2]

	[LOAD] n$6=*&entry_size:unsigned long [line 70, column 18]

	[STORE] *n$5.entry_size:unsigned long=n$6 [line 70, column 2]

	[META] NULLIFY(&entry_size); [line 70, column 2]

	[META] EXIT_SCOPE(n$5,n$6,entry_size); [line 70, column 2]

	[LOAD] n$4=*&p:mpool* [line 71, column 2]

	[STORE] *n$4.chunk_list:mpool_chunk*=null [line 71, column 2]

	[META] EXIT_SCOPE(n$4); [line 71, column 2]

	[LOAD] n$3=*&p:mpool* [line 72, column 2]

	[STORE] *n$3.entry_list:mpool_entry*=null [line 72, column 2]

	[META] EXIT_SCOPE(n$3); [line 72, column 2]

	[LOAD] n$2=*&p:mpool* [line 73, column 2]

	[STORE] *n$2.fallback:mpool*=null [line 73, column 2]

	[META] EXIT_SCOPE(n$2); [line 73, column 2]

	[LOAD] n$0=*&p:mpool* [line 74, column 11]

	[CALL] n$1=_fun_sl_init(n$0.lock:) [line 74, column 2]

	[META] NULLIFY(&p); [line 74, column 2]

	[META] EXIT_SCOPE(n$0,n$1,p); [line 74, column 2]

	[META] APPLY_ABSTRACTION; [line 74, column 2]

	[META] SKIP

[FUN] mpool_alloc_contiguous_no_fallback

	[META] SKIP

	[META] VARIABLE_DECLARED(ret:void*); [line 273, column 2]

	[STORE] *&ret:void*=null [line 273, column 2]

	[LOAD] n$52=*&p:mpool* [line 275, column 11]

	[LOAD] n$53=*n$52.entry_size:unsigned long [line 275, column 11]

	[LOAD] n$54=*&align:unsigned long [line 275, column 2]

	[STORE] *&align:unsigned long=(n$54 * n$53) [line 275, column 2]

	[META] EXIT_SCOPE(n$52,n$53,n$54); [line 275, column 2]

	[LOAD] n$50=*&p:mpool* [line 277, column 13]

	[CALL] n$51=_fun_mpool_lock(n$50:) [line 277, column 2]

	[META] EXIT_SCOPE(n$50,n$51); [line 277, column 2]

	[LOAD] n$49=*&p:mpool* [line 283, column 10]

	[STORE] *&prev:mpool_chunk**=n$49.chunk_list [line 283, column 2]

	[META] EXIT_SCOPE(n$49); [line 283, column 2]

	[META] APPLY_ABSTRACTION; [line 283, column 2]

	[META] SKIP

	[LOAD] n$3=*&prev:mpool_chunk** [line 284, column 10]

	[LOAD] n$4=*n$3:mpool_chunk* [line 284, column 9]

	[META] EXIT_SCOPE(n$3); [line 284, column 9]

	[PRUNE] PRUNE((n$4 != null), true); [line 284, column 9]

	[META] EXIT_SCOPE(n$4); [line 284, column 9]

	[PRUNE] PRUNE(!(n$4 != null), false); [line 284, column 9]

	[META] NULLIFY(&prev); [line 284, column 9]

	[META] NULLIFY(&align); [line 284, column 9]

	[META] EXIT_SCOPE(n$4,prev,align); [line 284, column 9]

	[META] APPLY_ABSTRACTION; [line 284, column 9]

	[META] VARIABLE_DECLARED(chunk:mpool_chunk*); [line 287, column 3]

	[LOAD] n$46=*&prev:mpool_chunk** [line 287, column 32]

	[LOAD] n$47=*n$46:mpool_chunk* [line 287, column 31]

	[STORE] *&chunk:mpool_chunk*=n$47 [line 287, column 3]

	[META] EXIT_SCOPE(n$46,n$47); [line 287, column 3]

	[LOAD] n$42=*&chunk:mpool_chunk* [line 290, column 24]

	[LOAD] n$43=*&align:unsigned long [line 290, column 32]

	[LOAD] n$44=*&align:unsigned long [line 290, column 45]

	[LOAD] n$45=*&align:unsigned long [line 290, column 54]

	[STORE] *&start:unsigned long=((((n$42 + n$43) - (unsigned long)1) / n$44) * n$45) [line 290, column 3]

	[META] EXIT_SCOPE(n$42,n$43,n$44,n$45); [line 290, column 3]

	[LOAD] n$38=*&start:unsigned long [line 298, column 27]

	[LOAD] n$39=*&count:unsigned long [line 298, column 36]

	[LOAD] n$40=*&p:mpool* [line 298, column 44]

	[LOAD] n$41=*n$40.entry_size:unsigned long [line 298, column 44]

	[STORE] *&new_chunk:mpool_chunk*=(n$38 + (n$39 * n$41)) [line 297, column 3]

	[META] EXIT_SCOPE(n$38,n$39,n$40,n$41); [line 297, column 3]

	[LOAD] n$6=*&new_chunk:mpool_chunk* [line 299, column 7]

	[LOAD] n$7=*&chunk:mpool_chunk* [line 299, column 20]

	[LOAD] n$8=*n$7.limit:mpool_chunk* [line 299, column 20]

	[META] EXIT_SCOPE(n$7); [line 299, column 20]

	[PRUNE] PRUNE((n$6 <= n$8), true); [line 299, column 7]

	[META] NULLIFY(&ret); [line 299, column 7]

	[META] NULLIFY(&align); [line 299, column 7]

	[META] EXIT_SCOPE(n$6,n$8,ret,align); [line 299, column 7]

	[PRUNE] PRUNE(!(n$6 <= n$8), false); [line 299, column 7]

	[META] NULLIFY(&prev); [line 299, column 7]

	[META] NULLIFY(&new_chunk); [line 299, column 7]

	[META] NULLIFY(&start); [line 299, column 7]

	[META] EXIT_SCOPE(n$6,n$8,prev,new_chunk,start); [line 299, column 7]

	[META] SKIP

	[LOAD] n$5=*&chunk:mpool_chunk* [line 322, column 11]

	[STORE] *&prev:mpool_chunk**=n$5.next_chunk [line 322, column 3]

	[META] NULLIFY(&chunk); [line 322, column 3]

	[META] EXIT_SCOPE(n$5,chunk); [line 322, column 3]

	[META] APPLY_ABSTRACTION; [line 322, column 3]

	[LOAD] n$24=*&new_chunk:mpool_chunk* [line 301, column 8]

	[LOAD] n$25=*&chunk:mpool_chunk* [line 301, column 21]

	[LOAD] n$26=*n$25.limit:mpool_chunk* [line 301, column 21]

	[META] EXIT_SCOPE(n$25); [line 301, column 21]

	[PRUNE] PRUNE((n$24 == n$26), true); [line 301, column 8]

	[META] NULLIFY(&new_chunk); [line 301, column 8]

	[META] EXIT_SCOPE(n$24,n$26,new_chunk); [line 301, column 8]

	[PRUNE] PRUNE(!(n$24 == n$26), false); [line 301, column 8]

	[META] EXIT_SCOPE(n$24,n$26); [line 301, column 8]

	[LOAD] n$27=*&prev:mpool_chunk** [line 302, column 6]

	[LOAD] n$28=*&chunk:mpool_chunk* [line 302, column 13]

	[LOAD] n$29=*n$28.next_chunk:mpool_chunk* [line 302, column 13]

	[STORE] *n$27:mpool_chunk*=n$29 [line 302, column 5]

	[META] EXIT_SCOPE(n$27,n$28,n$29); [line 302, column 5]

	[META] APPLY_ABSTRACTION; [line 302, column 5]

	[LOAD] n$32=*&new_chunk:mpool_chunk* [line 304, column 6]

	[LOAD] n$33=*&chunk:mpool_chunk* [line 304, column 19]

	[LOAD] n$34=*n$33:mpool_chunk [line 304, column 18]

	[STORE] *n$32:mpool_chunk=n$34 [line 304, column 5]

	[META] EXIT_SCOPE(n$32,n$33,n$34); [line 304, column 5]

	[LOAD] n$30=*&prev:mpool_chunk** [line 305, column 6]

	[LOAD] n$31=*&new_chunk:mpool_chunk* [line 305, column 13]

	[STORE] *n$30:mpool_chunk*=n$31 [line 305, column 5]

	[META] NULLIFY(&new_chunk); [line 305, column 5]

	[META] EXIT_SCOPE(n$30,n$31,new_chunk); [line 305, column 5]

	[META] APPLY_ABSTRACTION; [line 305, column 5]

	[META] SKIP

	[LOAD] n$11=*&start:unsigned long [line 312, column 8]

	[LOAD] n$12=*&chunk:mpool_chunk* [line 312, column 27]

	[LOAD] n$13=*&p:mpool* [line 312, column 36]

	[LOAD] n$14=*n$13.entry_size:unsigned long [line 312, column 36]

	[META] EXIT_SCOPE(n$13); [line 312, column 36]

	[PRUNE] PRUNE(((n$11 - n$12) >= n$14), true); [line 312, column 8]

	[META] EXIT_SCOPE(n$11,n$12,n$14); [line 312, column 8]

	[PRUNE] PRUNE(!((n$11 - n$12) >= n$14), false); [line 312, column 8]

	[META] NULLIFY(&prev); [line 312, column 8]

	[META] NULLIFY(&chunk); [line 312, column 8]

	[META] EXIT_SCOPE(n$11,n$12,n$14,prev,chunk); [line 312, column 8]

	[META] APPLY_ABSTRACTION; [line 312, column 8]

	[LOAD] n$19=*&chunk:mpool_chunk* [line 313, column 5]

	[LOAD] n$20=*&prev:mpool_chunk** [line 313, column 26]

	[LOAD] n$21=*n$20:mpool_chunk* [line 313, column 25]

	[STORE] *n$19.next_chunk:mpool_chunk*=n$21 [line 313, column 5]

	[META] EXIT_SCOPE(n$19,n$20,n$21); [line 313, column 5]

	[LOAD] n$17=*&prev:mpool_chunk** [line 314, column 6]

	[LOAD] n$18=*&chunk:mpool_chunk* [line 314, column 13]

	[STORE] *n$17:mpool_chunk*=n$18 [line 314, column 5]

	[META] NULLIFY(&prev); [line 314, column 5]

	[META] EXIT_SCOPE(n$17,n$18,prev); [line 314, column 5]

	[LOAD] n$15=*&chunk:mpool_chunk* [line 315, column 5]

	[LOAD] n$16=*&start:unsigned long [line 315, column 42]

	[STORE] *n$15.limit:mpool_chunk*=n$16 [line 315, column 5]

	[META] NULLIFY(&chunk); [line 315, column 5]

	[META] EXIT_SCOPE(n$15,n$16,chunk); [line 315, column 5]

	[META] APPLY_ABSTRACTION; [line 315, column 5]

	[META] SKIP

	[LOAD] n$10=*&start:unsigned long [line 318, column 18]

	[STORE] *&ret:void*=n$10 [line 318, column 4]

	[META] NULLIFY(&start); [line 318, column 4]

	[META] EXIT_SCOPE(n$10,start); [line 318, column 4]

	[META] APPLY_ABSTRACTION; [line 318, column 4]

	[LOAD] n$1=*&p:mpool* [line 325, column 15]

	[CALL] n$2=_fun_mpool_unlock(n$1:) [line 325, column 2]

	[META] NULLIFY(&p); [line 325, column 2]

	[META] EXIT_SCOPE(n$1,n$2,p); [line 325, column 2]

	[LOAD] n$0=*&ret:void* [line 327, column 9]

	[STORE] *&return:void*=n$0 [line 327, column 2]

	[META] NULLIFY(&ret); [line 327, column 2]

	[META] EXIT_SCOPE(n$0,ret); [line 327, column 2]

	[META] APPLY_ABSTRACTION; [line 327, column 2]

	[META] SKIP

[FUN] mpool_alloc_contiguous

	[META] SKIP

	[META] SKIP

	[META] VARIABLE_DECLARED(ret:void*); [line 345, column 3]

	[LOAD] n$7=*&p:mpool* [line 345, column 50]

	[LOAD] n$8=*&count:unsigned long [line 345, column 53]

	[LOAD] n$9=*&align:unsigned long [line 345, column 60]

	[CALL] n$10=_fun_mpool_alloc_contiguous_no_fallback(n$7:,n$8:,n$9:) [line 345, column 15]

	[STORE] *&ret:void*=n$10 [line 345, column 3]

	[META] EXIT_SCOPE(n$7,n$8,n$9,n$10); [line 345, column 3]

	[LOAD] n$3=*&ret:void* [line 347, column 7]

	[PRUNE] PRUNE((n$3 != null), true); [line 347, column 7]

	[META] NULLIFY(&p); [line 347, column 7]

	[META] EXIT_SCOPE(n$3,p); [line 347, column 7]

	[PRUNE] PRUNE(!(n$3 != null), false); [line 347, column 7]

	[META] NULLIFY(&ret); [line 347, column 7]

	[META] EXIT_SCOPE(n$3,ret); [line 347, column 7]

	[META] SKIP

	[LOAD] n$1=*&p:mpool* [line 351, column 7]

	[LOAD] n$2=*n$1.fallback:mpool* [line 351, column 7]

	[STORE] *&p:mpool*=n$2 [line 351, column 3]

	[META] EXIT_SCOPE(n$1,n$2); [line 351, column 3]

	[LOAD] n$0=*&p:mpool* [line 352, column 11]

	[PRUNE] PRUNE((n$0 != null), true); [line 352, column 11]

	[META] EXIT_SCOPE(n$0); [line 352, column 11]

	[META] APPLY_ABSTRACTION; [line 352, column 11]

	[PRUNE] PRUNE(!(n$0 != null), false); [line 352, column 11]

	[META] NULLIFY(&p); [line 352, column 11]

	[META] EXIT_SCOPE(n$0,p); [line 352, column 11]

	[STORE] *&return:void*=null [line 354, column 2]

	[META] APPLY_ABSTRACTION; [line 354, column 2]

	[LOAD] n$4=*&ret:void* [line 348, column 11]

	[STORE] *&return:void*=n$4 [line 348, column 4]

	[META] NULLIFY(&ret); [line 348, column 4]

	[META] EXIT_SCOPE(n$4,ret); [line 348, column 4]

	[META] APPLY_ABSTRACTION; [line 348, column 4]

	[META] SKIP

[FUN] mpool_add_chunk

	[META] SKIP

	[LOAD] n$26=*&begin:void* [line 164, column 26]

	[LOAD] n$27=*&p:mpool* [line 164, column 34]

	[LOAD] n$28=*n$27.entry_size:unsigned long [line 164, column 34]

	[LOAD] n$29=*&p:mpool* [line 164, column 55]

	[LOAD] n$30=*n$29.entry_size:unsigned long [line 164, column 55]

	[LOAD] n$31=*&p:mpool* [line 165, column 7]

	[LOAD] n$32=*n$31.entry_size:unsigned long [line 165, column 7]

	[STORE] *&new_begin:unsigned long=((((n$26 + n$28) - (unsigned long)1) / n$30) * n$32) [line 164, column 2]

	[META] EXIT_SCOPE(n$26,n$27,n$28,n$29,n$30,n$31,n$32); [line 164, column 2]

	[LOAD] n$20=*&begin:void* [line 166, column 24]

	[LOAD] n$21=*&size:unsigned long [line 166, column 32]

	[LOAD] n$22=*&p:mpool* [line 166, column 40]

	[LOAD] n$23=*n$22.entry_size:unsigned long [line 166, column 40]

	[LOAD] n$24=*&p:mpool* [line 166, column 56]

	[LOAD] n$25=*n$24.entry_size:unsigned long [line 166, column 56]

	[STORE] *&new_end:unsigned long=(((n$20 + n$21) / n$23) * n$25) [line 166, column 2]

	[META] NULLIFY(&begin); [line 166, column 2]

	[META] NULLIFY(&size); [line 166, column 2]

	[META] EXIT_SCOPE(n$20,n$21,n$22,n$23,n$24,n$25,begin,size); [line 166, column 2]

	[LOAD] n$12=*&new_begin:unsigned long [line 169, column 6]

	[LOAD] n$13=*&new_end:unsigned long [line 169, column 19]

	[PRUNE] PRUNE((n$12 >= n$13), true); [line 169, column 6]

	[META] NULLIFY(&new_end); [line 169, column 6]

	[META] NULLIFY(&new_begin); [line 169, column 6]

	[META] EXIT_SCOPE(n$12,n$13,new_end,new_begin); [line 169, column 6]

	[META] APPLY_ABSTRACTION; [line 169, column 6]

	[PRUNE] PRUNE(!(n$12 >= n$13), false); [line 169, column 6]

	[META] EXIT_SCOPE(n$12,n$13); [line 169, column 6]

	[LOAD] n$14=*&new_end:unsigned long [line 169, column 30]

	[LOAD] n$15=*&new_begin:unsigned long [line 169, column 40]

	[LOAD] n$16=*&p:mpool* [line 169, column 52]

	[LOAD] n$17=*n$16.entry_size:unsigned long [line 169, column 52]

	[META] EXIT_SCOPE(n$16); [line 169, column 52]

	[PRUNE] PRUNE(((n$14 - n$15) < n$17), true); [line 169, column 30]

	[META] NULLIFY(&new_end); [line 169, column 30]

	[META] NULLIFY(&new_begin); [line 169, column 30]

	[META] EXIT_SCOPE(n$14,n$15,n$17,new_end,new_begin); [line 169, column 30]

	[META] APPLY_ABSTRACTION; [line 169, column 30]

	[PRUNE] PRUNE(!((n$14 - n$15) < n$17), false); [line 169, column 30]

	[META] EXIT_SCOPE(n$14,n$15,n$17); [line 169, column 30]

	[META] SKIP

	[LOAD] n$11=*&new_begin:unsigned long [line 173, column 32]

	[STORE] *&chunk:mpool_chunk*=n$11 [line 173, column 2]

	[META] NULLIFY(&new_begin); [line 173, column 2]

	[META] EXIT_SCOPE(n$11,new_begin); [line 173, column 2]

	[LOAD] n$9=*&chunk:mpool_chunk* [line 174, column 2]

	[LOAD] n$10=*&new_end:unsigned long [line 174, column 39]

	[STORE] *n$9.limit:mpool_chunk*=n$10 [line 174, column 2]

	[META] NULLIFY(&new_end); [line 174, column 2]

	[META] EXIT_SCOPE(n$9,n$10,new_end); [line 174, column 2]

	[LOAD] n$7=*&p:mpool* [line 176, column 13]

	[CALL] n$8=_fun_mpool_lock(n$7:) [line 176, column 2]

	[META] EXIT_SCOPE(n$7,n$8); [line 176, column 2]

	[LOAD] n$4=*&chunk:mpool_chunk* [line 177, column 2]

	[LOAD] n$5=*&p:mpool* [line 177, column 22]

	[LOAD] n$6=*n$5.chunk_list:mpool_chunk* [line 177, column 22]

	[STORE] *n$4.next_chunk:mpool_chunk*=n$6 [line 177, column 2]

	[META] EXIT_SCOPE(n$4,n$5,n$6); [line 177, column 2]

	[LOAD] n$2=*&p:mpool* [line 178, column 2]

	[LOAD] n$3=*&chunk:mpool_chunk* [line 178, column 18]

	[STORE] *n$2.chunk_list:mpool_chunk*=n$3 [line 178, column 2]

	[META] NULLIFY(&chunk); [line 178, column 2]

	[META] EXIT_SCOPE(n$2,n$3,chunk); [line 178, column 2]

	[LOAD] n$0=*&p:mpool* [line 179, column 15]

	[CALL] n$1=_fun_mpool_unlock(n$0:) [line 179, column 2]

	[META] NULLIFY(&p); [line 179, column 2]

	[META] EXIT_SCOPE(n$0,n$1,p); [line 179, column 2]

	[STORE] *&return:_Bool=1 [line 181, column 2]

	[META] APPLY_ABSTRACTION; [line 181, column 2]

	[STORE] *&return:_Bool=0 [line 170, column 3]

	[META] APPLY_ABSTRACTION; [line 170, column 3]

	[META] SKIP

[FUN] mpool_alloc

	[META] SKIP

	[META] SKIP

	[META] VARIABLE_DECLARED(ret:void*); [line 235, column 3]

	[LOAD] n$7=*&p:mpool* [line 235, column 39]

	[CALL] n$8=_fun_mpool_alloc_no_fallback(n$7:) [line 235, column 15]

	[STORE] *&ret:void*=n$8 [line 235, column 3]

	[META] EXIT_SCOPE(n$7,n$8); [line 235, column 3]

	[LOAD] n$3=*&ret:void* [line 237, column 7]

	[PRUNE] PRUNE((n$3 != null), true); [line 237, column 7]

	[META] NULLIFY(&p); [line 237, column 7]

	[META] EXIT_SCOPE(n$3,p); [line 237, column 7]

	[PRUNE] PRUNE(!(n$3 != null), false); [line 237, column 7]

	[META] NULLIFY(&ret); [line 237, column 7]

	[META] EXIT_SCOPE(n$3,ret); [line 237, column 7]

	[META] SKIP

	[LOAD] n$1=*&p:mpool* [line 241, column 7]

	[LOAD] n$2=*n$1.fallback:mpool* [line 241, column 7]

	[STORE] *&p:mpool*=n$2 [line 241, column 3]

	[META] EXIT_SCOPE(n$1,n$2); [line 241, column 3]

	[LOAD] n$0=*&p:mpool* [line 242, column 11]

	[PRUNE] PRUNE((n$0 != null), true); [line 242, column 11]

	[META] EXIT_SCOPE(n$0); [line 242, column 11]

	[META] APPLY_ABSTRACTION; [line 242, column 11]

	[PRUNE] PRUNE(!(n$0 != null), false); [line 242, column 11]

	[META] NULLIFY(&p); [line 242, column 11]

	[META] EXIT_SCOPE(n$0,p); [line 242, column 11]

	[STORE] *&return:void*=null [line 244, column 2]

	[META] APPLY_ABSTRACTION; [line 244, column 2]

	[LOAD] n$4=*&ret:void* [line 238, column 11]

	[STORE] *&return:void*=n$4 [line 238, column 4]

	[META] NULLIFY(&ret); [line 238, column 4]

	[META] EXIT_SCOPE(n$4,ret); [line 238, column 4]

	[META] APPLY_ABSTRACTION; [line 238, column 4]

	[META] SKIP

[FUN] sl_lock

	[META] SKIP

	[LOAD] n$0=*&l:spinlock* [line 59, column 11]

	[LOAD] n$1=*&l:spinlock* [line 60, column 9]

	[CALL] n$2=_fun___infer_skip_gcc_asm_stmt(n$0:,&tmp1:,&tmp2:,n$1:) [line 51, column 2]

	[META] NULLIFY(&l); [line 51, column 2]

	[META] EXIT_SCOPE(n$0,n$1,n$2,tmp2,l,tmp1); [line 51, column 2]

	[META] APPLY_ABSTRACTION; [line 51, column 2]

	[META] NULLIFY(&tmp1); [line 62, column 1]

	[META] NULLIFY(&tmp2); [line 62, column 1]

[FUN] mpool_unlock

	[META] SKIP

	[LOAD] n$0=*&#GB<src/mpool.c>$mpool_locks_enabled:_Bool [line 56, column 6]

	[PRUNE] PRUNE(n$0, true); [line 56, column 6]

	[META] EXIT_SCOPE(n$0); [line 56, column 6]

	[LOAD] n$0=*&#GB<src/mpool.c>$mpool_locks_enabled:_Bool [line 56, column 6]

	[PRUNE] PRUNE(!n$0, false); [line 56, column 6]

	[META] EXIT_SCOPE(n$0); [line 56, column 6]

	[META] APPLY_ABSTRACTION; [line 56, column 6]

	[LOAD] n$1=*&p:mpool* [line 57, column 14]

	[CALL] n$2=_fun_sl_unlock(n$1.lock:) [line 57, column 3]

	[META] NULLIFY(&p); [line 57, column 3]

	[META] EXIT_SCOPE(n$1,n$2,p); [line 57, column 3]

	[META] APPLY_ABSTRACTION; [line 57, column 3]

	[META] SKIP

	[META] APPLY_ABSTRACTION; [line 56, column 2]

	[META] SKIP

[FUN] mpool_fini

	[META] SKIP

	[LOAD] n$33=*&p:mpool* [line 116, column 7]

	[LOAD] n$34=*n$33.fallback:mpool* [line 116, column 7]

	[PRUNE] PRUNE(!n$34, true); [line 116, column 7]

	[META] NULLIFY(&p); [line 116, column 7]

	[META] EXIT_SCOPE(n$33,n$34,p); [line 116, column 7]

	[LOAD] n$33=*&p:mpool* [line 116, column 7]

	[LOAD] n$34=*n$33.fallback:mpool* [line 116, column 7]

	[PRUNE] PRUNE(n$34, false); [line 116, column 7]

	[META] EXIT_SCOPE(n$33,n$34); [line 116, column 7]

	[META] SKIP

	[LOAD] n$31=*&p:mpool* [line 120, column 13]

	[CALL] n$32=_fun_mpool_lock(n$31:) [line 120, column 2]

	[META] EXIT_SCOPE(n$31,n$32); [line 120, column 2]

	[LOAD] n$29=*&p:mpool* [line 123, column 10]

	[LOAD] n$30=*n$29.entry_list:mpool_entry* [line 123, column 10]

	[STORE] *&entry:mpool_entry*=n$30 [line 123, column 2]

	[META] EXIT_SCOPE(n$29,n$30); [line 123, column 2]

	[META] APPLY_ABSTRACTION; [line 123, column 2]

	[META] APPLY_ABSTRACTION; [line 117, column 3]

	[META] SKIP

	[META] SKIP

	[LOAD] n$20=*&entry:mpool_entry* [line 124, column 9]

	[PRUNE] PRUNE((n$20 != null), true); [line 124, column 9]

	[META] EXIT_SCOPE(n$20); [line 124, column 9]

	[PRUNE] PRUNE(!(n$20 != null), false); [line 124, column 9]

	[META] NULLIFY(&entry); [line 124, column 9]

	[META] EXIT_SCOPE(n$20,entry); [line 124, column 9]

	[LOAD] n$18=*&p:mpool* [line 132, column 10]

	[LOAD] n$19=*n$18.chunk_list:mpool_chunk* [line 132, column 10]

	[STORE] *&chunk:mpool_chunk*=n$19 [line 132, column 2]

	[META] EXIT_SCOPE(n$18,n$19); [line 132, column 2]

	[META] APPLY_ABSTRACTION; [line 132, column 2]

	[META] VARIABLE_DECLARED(ptr:void*); [line 125, column 3]

	[LOAD] n$27=*&entry:mpool_entry* [line 125, column 15]

	[STORE] *&ptr:void*=n$27 [line 125, column 3]

	[META] EXIT_SCOPE(n$27); [line 125, column 3]

	[LOAD] n$25=*&entry:mpool_entry* [line 127, column 11]

	[LOAD] n$26=*n$25.next:mpool_entry* [line 127, column 11]

	[STORE] *&entry:mpool_entry*=n$26 [line 127, column 3]

	[META] EXIT_SCOPE(n$25,n$26); [line 127, column 3]

	[LOAD] n$21=*&p:mpool* [line 128, column 14]

	[LOAD] n$22=*n$21.fallback:mpool* [line 128, column 14]

	[LOAD] n$23=*&ptr:void* [line 128, column 27]

	[CALL] n$24=_fun_mpool_free(n$22:,n$23:) [line 128, column 3]

	[META] NULLIFY(&ptr); [line 128, column 3]

	[META] EXIT_SCOPE(n$21,n$22,n$23,n$24,ptr); [line 128, column 3]

	[META] APPLY_ABSTRACTION; [line 128, column 3]

	[META] SKIP

	[LOAD] n$5=*&chunk:mpool_chunk* [line 133, column 9]

	[PRUNE] PRUNE((n$5 != null), true); [line 133, column 9]

	[META] EXIT_SCOPE(n$5); [line 133, column 9]

	[PRUNE] PRUNE(!(n$5 != null), false); [line 133, column 9]

	[META] NULLIFY(&chunk); [line 133, column 9]

	[META] EXIT_SCOPE(n$5,chunk); [line 133, column 9]

	[LOAD] n$4=*&p:mpool* [line 141, column 2]

	[STORE] *n$4.chunk_list:mpool_chunk*=null [line 141, column 2]

	[META] EXIT_SCOPE(n$4); [line 141, column 2]

	[LOAD] n$3=*&p:mpool* [line 142, column 2]

	[STORE] *n$3.entry_list:mpool_entry*=null [line 142, column 2]

	[META] EXIT_SCOPE(n$3); [line 142, column 2]

	[LOAD] n$2=*&p:mpool* [line 143, column 2]

	[STORE] *n$2.fallback:mpool*=null [line 143, column 2]

	[META] EXIT_SCOPE(n$2); [line 143, column 2]

	[LOAD] n$0=*&p:mpool* [line 145, column 15]

	[CALL] n$1=_fun_mpool_unlock(n$0:) [line 145, column 2]

	[META] NULLIFY(&p); [line 145, column 2]

	[META] EXIT_SCOPE(n$0,n$1,p); [line 145, column 2]

	[META] APPLY_ABSTRACTION; [line 145, column 2]

	[META] VARIABLE_DECLARED(ptr:void*); [line 134, column 3]

	[LOAD] n$16=*&chunk:mpool_chunk* [line 134, column 15]

	[STORE] *&ptr:void*=n$16 [line 134, column 3]

	[META] EXIT_SCOPE(n$16); [line 134, column 3]

	[META] VARIABLE_DECLARED(size:unsigned long); [line 135, column 3]

	[LOAD] n$13=*&chunk:mpool_chunk* [line 135, column 28]

	[LOAD] n$14=*n$13.limit:mpool_chunk* [line 135, column 28]

	[LOAD] n$15=*&chunk:mpool_chunk* [line 135, column 54]

	[STORE] *&size:unsigned long=(n$14 - n$15) [line 135, column 3]

	[META] EXIT_SCOPE(n$13,n$14,n$15); [line 135, column 3]

	[LOAD] n$11=*&chunk:mpool_chunk* [line 137, column 11]

	[LOAD] n$12=*n$11.next_chunk:mpool_chunk* [line 137, column 11]

	[STORE] *&chunk:mpool_chunk*=n$12 [line 137, column 3]

	[META] EXIT_SCOPE(n$11,n$12); [line 137, column 3]

	[LOAD] n$6=*&p:mpool* [line 138, column 19]

	[LOAD] n$7=*n$6.fallback:mpool* [line 138, column 19]

	[LOAD] n$8=*&ptr:void* [line 138, column 32]

	[LOAD] n$9=*&size:unsigned long [line 138, column 37]

	[CALL] n$10=_fun_mpool_add_chunk(n$7:,n$8:,n$9:) [line 138, column 3]

	[META] NULLIFY(&size); [line 138, column 3]

	[META] NULLIFY(&ptr); [line 138, column 3]

	[META] EXIT_SCOPE(n$6,n$7,n$8,n$9,n$10,size,ptr); [line 138, column 3]

	[META] APPLY_ABSTRACTION; [line 138, column 3]

[FUN] sl_init

	[META] SKIP

	[LOAD] n$0=*&l:spinlock* [line 30, column 3]

	[STORE] *n$0.v:unsigned int=(unsigned int)0 [line 30, column 7]

	[LOAD] n$1=*n$0:spinlock [line 30, column 7]

	[META] NULLIFY(&l); [line 30, column 7]

	[META] EXIT_SCOPE(n$0,n$1,l); [line 30, column 7]

	[META] APPLY_ABSTRACTION; [line 30, column 7]

	[META] SKIP

[FUN] mpool_lock

	[META] SKIP

	[LOAD] n$0=*&#GB<src/mpool.c>$mpool_locks_enabled:_Bool [line 46, column 6]

	[PRUNE] PRUNE(n$0, true); [line 46, column 6]

	[META] EXIT_SCOPE(n$0); [line 46, column 6]

	[LOAD] n$0=*&#GB<src/mpool.c>$mpool_locks_enabled:_Bool [line 46, column 6]

	[PRUNE] PRUNE(!n$0, false); [line 46, column 6]

	[META] EXIT_SCOPE(n$0); [line 46, column 6]

	[META] APPLY_ABSTRACTION; [line 46, column 6]

	[LOAD] n$1=*&p:mpool* [line 47, column 12]

	[CALL] n$2=_fun_sl_lock(n$1.lock:) [line 47, column 3]

	[META] NULLIFY(&p); [line 47, column 3]

	[META] EXIT_SCOPE(n$1,n$2,p); [line 47, column 3]

	[META] APPLY_ABSTRACTION; [line 47, column 3]

	[META] SKIP

	[META] APPLY_ABSTRACTION; [line 46, column 2]

	[META] SKIP

[FUN] sl_unlock

	[META] SKIP

	[LOAD] n$0=*&l:spinlock* [line 70, column 44]

	[LOAD] n$1=*&l:spinlock* [line 70, column 53]

	[CALL] n$2=_fun___infer_skip_gcc_asm_stmt(n$0:,n$1:) [line 70, column 2]

	[META] NULLIFY(&l); [line 70, column 2]

	[META] EXIT_SCOPE(n$0,n$1,n$2,l); [line 70, column 2]

	[META] APPLY_ABSTRACTION; [line 70, column 2]

	[META] SKIP

[FUN] mpool_free

	[META] SKIP

	[META] VARIABLE_DECLARED(e:mpool_entry*); [line 255, column 2]

	[LOAD] n$9=*&ptr:void* [line 255, column 26]

	[STORE] *&e:mpool_entry*=n$9 [line 255, column 2]

	[META] NULLIFY(&ptr); [line 255, column 2]

	[META] EXIT_SCOPE(n$9,ptr); [line 255, column 2]

	[LOAD] n$7=*&p:mpool* [line 258, column 13]

	[CALL] n$8=_fun_mpool_lock(n$7:) [line 258, column 2]

	[META] EXIT_SCOPE(n$7,n$8); [line 258, column 2]

	[LOAD] n$4=*&e:mpool_entry* [line 259, column 2]

	[LOAD] n$5=*&p:mpool* [line 259, column 12]

	[LOAD] n$6=*n$5.entry_list:mpool_entry* [line 259, column 12]

	[STORE] *n$4.next:mpool_entry*=n$6 [line 259, column 2]

	[META] EXIT_SCOPE(n$4,n$5,n$6); [line 259, column 2]

	[LOAD] n$2=*&p:mpool* [line 260, column 2]

	[LOAD] n$3=*&e:mpool_entry* [line 260, column 18]

	[STORE] *n$2.entry_list:mpool_entry*=n$3 [line 260, column 2]

	[META] NULLIFY(&e); [line 260, column 2]

	[META] EXIT_SCOPE(n$2,n$3,e); [line 260, column 2]

	[LOAD] n$0=*&p:mpool* [line 261, column 15]

	[CALL] n$1=_fun_mpool_unlock(n$0:) [line 261, column 2]

	[META] NULLIFY(&p); [line 261, column 2]

	[META] EXIT_SCOPE(n$0,n$1,p); [line 261, column 2]

	[META] APPLY_ABSTRACTION; [line 261, column 2]

	[META] SKIP

[FUN] mpool_alloc_no_fallback

	[META] SKIP

	[LOAD] n$37=*&p:mpool* [line 195, column 13]

	[CALL] n$38=_fun_mpool_lock(n$37:) [line 195, column 2]

	[META] EXIT_SCOPE(n$37,n$38); [line 195, column 2]

	[LOAD] n$26=*&p:mpool* [line 196, column 6]

	[LOAD] n$27=*n$26.entry_list:mpool_entry* [line 196, column 6]

	[META] EXIT_SCOPE(n$26); [line 196, column 6]

	[PRUNE] PRUNE((n$27 != null), true); [line 196, column 6]

	[META] EXIT_SCOPE(n$27); [line 196, column 6]

	[PRUNE] PRUNE(!(n$27 != null), false); [line 196, column 6]

	[META] EXIT_SCOPE(n$27); [line 196, column 6]

	[META] SKIP

	[LOAD] n$24=*&p:mpool* [line 205, column 10]

	[LOAD] n$25=*n$24.chunk_list:mpool_chunk* [line 205, column 10]

	[STORE] *&chunk:mpool_chunk*=n$25 [line 205, column 2]

	[META] EXIT_SCOPE(n$24,n$25); [line 205, column 2]

	[LOAD] n$20=*&chunk:mpool_chunk* [line 206, column 6]

	[PRUNE] PRUNE((n$20 == null), true); [line 206, column 6]

	[META] NULLIFY(&chunk); [line 206, column 6]

	[META] EXIT_SCOPE(n$20,chunk); [line 206, column 6]

	[PRUNE] PRUNE(!(n$20 == null), false); [line 206, column 6]

	[META] EXIT_SCOPE(n$20); [line 206, column 6]

	[META] SKIP

	[LOAD] n$17=*&chunk:mpool_chunk* [line 212, column 48]

	[LOAD] n$18=*&p:mpool* [line 212, column 56]

	[LOAD] n$19=*n$18.entry_size:unsigned long [line 212, column 56]

	[STORE] *&new_chunk:mpool_chunk*=(n$17 + n$19) [line 212, column 2]

	[META] EXIT_SCOPE(n$17,n$18,n$19); [line 212, column 2]

	[LOAD] n$5=*&new_chunk:mpool_chunk* [line 213, column 6]

	[LOAD] n$6=*&chunk:mpool_chunk* [line 213, column 19]

	[LOAD] n$7=*n$6.limit:mpool_chunk* [line 213, column 19]

	[META] EXIT_SCOPE(n$6); [line 213, column 19]

	[PRUNE] PRUNE((n$5 >= n$7), true); [line 213, column 6]

	[META] NULLIFY(&new_chunk); [line 213, column 6]

	[META] EXIT_SCOPE(n$5,n$7,new_chunk); [line 213, column 6]

	[PRUNE] PRUNE(!(n$5 >= n$7), false); [line 213, column 6]

	[META] EXIT_SCOPE(n$5,n$7); [line 213, column 6]

	[LOAD] n$8=*&p:mpool* [line 214, column 3]

	[LOAD] n$9=*&chunk:mpool_chunk* [line 214, column 19]

	[LOAD] n$10=*n$9.next_chunk:mpool_chunk* [line 214, column 19]

	[STORE] *n$8.chunk_list:mpool_chunk*=n$10 [line 214, column 3]

	[META] EXIT_SCOPE(n$8,n$9,n$10); [line 214, column 3]

	[META] APPLY_ABSTRACTION; [line 214, column 3]

	[LOAD] n$13=*&new_chunk:mpool_chunk* [line 216, column 4]

	[LOAD] n$14=*&chunk:mpool_chunk* [line 216, column 17]

	[LOAD] n$15=*n$14:mpool_chunk [line 216, column 16]

	[STORE] *n$13:mpool_chunk=n$15 [line 216, column 3]

	[META] EXIT_SCOPE(n$13,n$14,n$15); [line 216, column 3]

	[LOAD] n$11=*&p:mpool* [line 217, column 3]

	[LOAD] n$12=*&new_chunk:mpool_chunk* [line 217, column 19]

	[STORE] *n$11.chunk_list:mpool_chunk*=n$12 [line 217, column 3]

	[META] NULLIFY(&new_chunk); [line 217, column 3]

	[META] EXIT_SCOPE(n$11,n$12,new_chunk); [line 217, column 3]

	[META] APPLY_ABSTRACTION; [line 217, column 3]

	[META] SKIP

	[LOAD] n$4=*&chunk:mpool_chunk* [line 220, column 8]

	[STORE] *&ret:void*=n$4 [line 220, column 2]

	[META] NULLIFY(&chunk); [line 220, column 2]

	[META] EXIT_SCOPE(n$4,chunk); [line 220, column 2]

	[META] APPLY_ABSTRACTION; [line 220, column 2]

	[STORE] *&ret:void*=null [line 208, column 3]

	[META] APPLY_ABSTRACTION; [line 208, column 3]

	[META] VARIABLE_DECLARED(entry:mpool_entry*); [line 197, column 3]

	[LOAD] n$33=*&p:mpool* [line 197, column 31]

	[LOAD] n$34=*n$33.entry_list:mpool_entry* [line 197, column 31]

	[STORE] *&entry:mpool_entry*=n$34 [line 197, column 3]

	[META] EXIT_SCOPE(n$33,n$34); [line 197, column 3]

	[LOAD] n$30=*&p:mpool* [line 199, column 3]

	[LOAD] n$31=*&entry:mpool_entry* [line 199, column 19]

	[LOAD] n$32=*n$31.next:mpool_entry* [line 199, column 19]

	[STORE] *n$30.entry_list:mpool_entry*=n$32 [line 199, column 3]

	[META] EXIT_SCOPE(n$30,n$31,n$32); [line 199, column 3]

	[LOAD] n$29=*&entry:mpool_entry* [line 200, column 9]

	[STORE] *&ret:void*=n$29 [line 200, column 3]

	[META] NULLIFY(&entry); [line 200, column 3]

	[META] EXIT_SCOPE(n$29,entry); [line 200, column 3]

	[META] APPLY_ABSTRACTION; [line 200, column 3]

	[META] SKIP

	[LOAD] n$1=*&p:mpool* [line 223, column 15]

	[CALL] n$2=_fun_mpool_unlock(n$1:) [line 223, column 2]

	[META] NULLIFY(&p); [line 223, column 2]

	[META] EXIT_SCOPE(n$1,n$2,p); [line 223, column 2]

	[LOAD] n$0=*&ret:void* [line 225, column 9]

	[STORE] *&return:void*=n$0 [line 225, column 2]

	[META] NULLIFY(&ret); [line 225, column 2]

	[META] EXIT_SCOPE(n$0,ret); [line 225, column 2]

	[META] APPLY_ABSTRACTION; [line 225, column 2]

	[META] SKIP

[FUN] mpool_init_with_fallback

	[META] SKIP

	[LOAD] n$2=*&p:mpool* [line 103, column 13]

	[LOAD] n$3=*&fallback:mpool* [line 103, column 16]

	[LOAD] n$4=*n$3.entry_size:unsigned long [line 103, column 16]

	[CALL] n$5=_fun_mpool_init(n$2:,n$4:) [line 103, column 2]

	[META] EXIT_SCOPE(n$2,n$3,n$4,n$5); [line 103, column 2]

	[LOAD] n$0=*&p:mpool* [line 104, column 2]

	[LOAD] n$1=*&fallback:mpool* [line 104, column 16]

	[STORE] *n$0.fallback:mpool*=n$1 [line 104, column 2]

	[META] NULLIFY(&fallback); [line 104, column 2]

	[META] NULLIFY(&p); [line 104, column 2]

	[META] EXIT_SCOPE(n$0,n$1,fallback,p); [line 104, column 2]

	[META] APPLY_ABSTRACTION; [line 104, column 2]

	[META] SKIP

// p: mutable reference, from: unlocked shared reference
// p->lock: uninitialized
[FUN] mpool_init_from

	[META] SKIP

	[LOAD] n$16=*&p:mpool* [line 84, column 13]
    // n$16: mutable reference (borrowed from p), 
    // p: mutable reference (borrowed to n$16),
    // from: unlocked shared reference

	[LOAD] n$17=*&from:mpool* [line 84, column 16]
    // n$16: mutable reference (borrowed from p), 
    // p: mutable reference (borrowed to n$16),
    // n$17: unlocked shared reference,
    // from: unlocked shared reference

    //(*n$17).entry_size is a constant
	[LOAD] n$18=(*n$17).entry_size:unsigned long [line 84, column 16]
    // n$16: mutable reference (borrowed from p), 
    // p: mutable reference (borrowed to n$16),
    // n$17: unlocked shared reference,
    // n$18: primitive
    // from: unlocked shared reference

	[CALL] n$19=_fun_mpool_init(n$16:,n$18:) [line 84, column 2]
    // n$16->lock: initialized
    // n$16: mutable reference (borrowed from p), 
    // p: mutable reference (borrowed to n$16),
    // n$17: unlocked shared reference,
    // n$18: primitive
    // from: unlocked shared reference

	[META] EXIT_SCOPE(n$16,n$17,n$18,n$19); [line 84, column 2]
    // p: mutable reference 
    // p->lock: initialized
    // from: unlocked shared reference

	[LOAD] n$14=*&from:mpool* [line 86, column 13]
    // p: mutable reference 
    // p->lock: initialized
    // from: unlocked shared reference (copied to "n$14")
    // n$14: unlocked shared reference (copied from "from")
    // interior mutability?

	[CALL] n$15=_fun_mpool_lock(n$14:) [line 86, column 2]
    // p: mutable reference 
    // p->lock: initialized
    // from: locked mutable reference (copied to "n$14") - we cannot do this.
    //  -- ???? unlocked shared reference -> locked mutable reference (should
    //  not use this variable)
    // n$14: locked mutable reference (copied from "from")
    
    /* [LSH] A shared reference can be copied to any other variables and "lock"
     * is a special instruction that converts a unlock shared reference to a
     * locked mutable reference. After the "fun_mpool_lock" intsruction, "n$14"
     * becomes a locked mutable reference, but still "from" remains as a
     * unlocked shared reference unless we keep track of copies for all the
     * shared references. Then, we cannot modify any fields of "from" even
     * after it is locked. Even if we keep track of all the copy information,
     * because "from" should be converted to 'locked mutable reference (borrowed
     * to n$14)', not just 'locked mutable reference', typing rules would be
     * complicated to track ownership.  
     * The "interior mutability" would be useful to handle this case. When
     * "chunk_list", "entry_list", and "fallback" can be modified even if they
     * are fields of an immutable shared reference, we can make typing rules
     * simpler for the programming patterns. 
     * //TODO: we can check the safety of "interior mutability" in static
     * time? or just leave them unsafe?
     */

	[META] EXIT_SCOPE(n$14,n$15); [line 86, column 2]
    // p: mutable reference 
    // p->lock: initialized
    // from: locked mutable reference 

	[LOAD] n$11=*&p:mpool* [line 87, column 2]
    // p: mutable reference (borrowed to "n$11")
    // n$11: mutable reference (borrowed from "p")
    // p->lock: initialized
    // from: locked mutable reference 

	[LOAD] n$12=*&from:mpool* [line 87, column 18]
    // p: mutable reference (borrowed to "n$11")
    // n$11: mutable reference (borrowed from "p")
    // p->lock: initialized
    // n$11->lock: initialized
    // from: locked mutable reference (borrowed to "n$12")
    // n$12: locked mutable reference (borrowed from "from")

	[LOAD] n$13=*n$12.chunk_list:mpool_chunk* [line 87, column 18]
    // p: mutable reference (borrowed to "n$11")
    // n$11: mutable reference (borrowed from "p")
    // p->lock: initialized
    // n$11->lock: initialized
    // from: locked mutable reference (borrowed to "n$12")
    // n$12: locked mutable reference (borrowed from "from")
    // n$12->chunk_list: mutable reference (borrowed to "n$13")
    // n$13: mutable reference (borrowed from "n$12->chunk_list")

	[STORE] *n$11.chunk_list:mpool_chunk*=n$13 [line 87, column 2]
    // p: mutable reference (borrowed to "n$11")
    // n$11: mutable reference (borrowed from "p")
    // p->lock: initialized
    // n$11->lock: initialized
    // from: locked mutable reference (borrowed to "n$12")
    // n$12: locked mutable reference (borrowed from "from")
    // n$12->chunk_list: locked mutable reference (borrowed to "n$13") 
    // --? we need to know what fields are protected by the "lock"
    // n$13: locked mutable reference (borrowed from "n$12->chunk_list")
    // n$11->chunk_list: mutable reference

	[META] EXIT_SCOPE(n$11,n$12,n$13); [line 87, column 2]
    // p: mutable reference 
    // p->chunk_list: mutable reference
    // p->lock: initialized
    // from: locked mutable reference 
    // from->chunk_list: locked mutable reference

	[LOAD] n$8=*&p:mpool* [line 88, column 2]

	[LOAD] n$9=*&from:mpool* [line 88, column 18]

	[LOAD] n$10=*n$9.entry_list:mpool_entry* [line 88, column 18]

	[STORE] *n$8.entry_list:mpool_entry*=n$10 [line 88, column 2]

	[META] EXIT_SCOPE(n$8,n$9,n$10); [line 88, column 2]

	[LOAD] n$5=*&p:mpool* [line 89, column 2]

	[LOAD] n$6=*&from:mpool* [line 89, column 16]

	[LOAD] n$7=*n$6.fallback:mpool* [line 89, column 16]

	[STORE] *n$5.fallback:mpool*=n$7 [line 89, column 2]

	[META] NULLIFY(&p); [line 89, column 2]

	[META] EXIT_SCOPE(n$5,n$6,n$7,p); [line 89, column 2]

	[LOAD] n$4=*&from:mpool* [line 91, column 2]

	[STORE] *n$4.chunk_list:mpool_chunk*=null [line 91, column 2]

	[META] EXIT_SCOPE(n$4); [line 91, column 2]

	[LOAD] n$3=*&from:mpool* [line 92, column 2]

	[STORE] *n$3.entry_list:mpool_entry*=null [line 92, column 2]

	[META] EXIT_SCOPE(n$3); [line 92, column 2]

	[LOAD] n$2=*&from:mpool* [line 93, column 2]

	[STORE] *n$2.fallback:mpool*=null [line 93, column 2]

	[META] EXIT_SCOPE(n$2); [line 93, column 2]

	[LOAD] n$0=*&from:mpool* [line 94, column 15]

	[CALL] n$1=_fun_mpool_unlock(n$0:) [line 94, column 2]

	[META] NULLIFY(&from); [line 94, column 2]

	[META] EXIT_SCOPE(n$0,n$1,from); [line 94, column 2]

	[META] APPLY_ABSTRACTION; [line 94, column 2]

	[META] SKIP

